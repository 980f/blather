vscode/platform io for arduino teething pains

) 1538 boards and I have to know the fucking exact spelling to find the one I have. What if I don't know what spelling the person who added it to the IDE used? What if all I know is the processor type?
) file browser: single lettered root directory is hard to click on, and looking into links to discover their nature is a no-no, links serve to let the user fix unreasonable directory layouts imposed by tools. 
) I don't remember authorizing a Projects directory in my home directory. What if everything I do is something I want to share with other users? Ask before creating directories that will hold user data.
) Arduino (annoyingly) puts things like sketch directory in a well known place, the "Import Arduino Project" should start with that.
) why are tools being downloaded when they already exist in the .arduino15 directory? Are different tools going to be used causing gratuitous differences between IDE's? Also it takes a long time and is something that was already done, why redo it? Also this is the second attempt at the import so the stuff should have already been present, I deleted nothing.
) "Do you trust the files in this folder" dialog does not identify which folder it is concerned with. If it is a folder that has been on my system and has executables in it (scripts mostly) why would anyone not accept the designations the user has already made on these files? The only opening is that CWD is often not in a person's exec path and the IDE might choose to invoked user selected files explicitly. But the user is responsible, trust the freaking OS and user on executable files, don't build an OS within an OS, it is a waste of time.
) fucking workspaces. I have already declared workspaces by choosing where to put files on my computer. The "workspace" concept is useless in every system that implements it, it obfuscates actual directory layout and what good can come from that!? Is this a windowsism due to most windows users not knowing about its file links (which work just fine) that has leaked into the program?
) so the tool creates files associated with my project wtf elsewhere on my system making git management of the build arduous. Why create a project out in left field instead of keeping the project stuff local to where the source code is? Why add such complexities and loose coupling? 
) Oh Look! They fucking copied my files many of which are relative links and so are now broken. How the fuck dare they?! What is the point of making me start all over in my git repo history? Why impose their directory structure on my code? Why must things be done their way or not at all? Why have a separate include directory? I don't want or need to split my source that way. This is plain fucking annoying.
) Yep, decoupled from my git repo allright. 
) I don't want my PlatformIO/Projects where they are put, I have a backup system and my home directory ain't in it.  
) 'lib' is useless to me, if I have the source then why compile all of the library code then discard the parts not needed when linking? My libraries are pools of source code, not intermediate binaries.
) Does this IDE know anything about code? Why do I not have "exclude from build" as an option on each file and folder in the main project folder? That was basic IDE capability 30 freaking years ago and is still very useful. This is primitive!
) I deleted 'include' in my c/c++ configuration and some sonofabitch put it right back in. So now I'll delete the useless directory and see what happens: I get a red notice that it has gone missing, but when I delete it it stays deleted. 
) To get Arduino to not try to compile everything it sees I use links to my source pool. For my convenience I also had a link to the source pool named 'lib'. It is now called 'links' as platformio insists on investigating my lib directory even when I ask it not to via the poorly documented .ini file parameter for filtering sources. It is poorly documented as it is not at all clear where in the ini file it should go.
) "Converting dwarvenMines.ino" fucks up royally when given an #if defined(...) #elif defined(...) series of symbols guaranteed to have at most one defined yet it treats all as if true. This is egregiously stupid, what are they even trying to do by processing the body of the file in such a fashion? This construct is common, having to pick different pins depending upon which board is being used. All that is needed is to write a main.cpp just like Arduino does, no need to alter the user's files at all. 
) toolchain for riscV32 (esp32-C3) is 4 years out of date, gcc 8.4 when 13.2 is available for esp32-arduino. Why did they not use the existing arduino tools directories? I understand they want independence so offer a choice and then if a separate instance of the tools is needed download from Arduino so that you are getting the same tools. Esptool is at 4.5, arduino 4.9.
) I need to switch processor (hoping their gcc is not way out of date), where is the GUI menu for selecting a different one? What, I have to start over from scratch!?
) there are absolute paths in the configuration files, but some are in essence part of the build and as such need to be relative to at least the git root so that others can use my project. WTF are those people thinking? Don't they ever share their code with people new to the build system who don't want to learn which text files to manually edit? IDE is supposed to mean Integrated, not Irritating.
) IDE's are about project management and yet there is not a single "project" menu or anything like it. WTF has happened to the industry with this 35 year regression in tooling?
) so the web tells me to issue a command on the commandline so I go to do that and get "Command 'pio' not installed". Changing board is a fundamental operation, why is it CLI rather than in the GUI? That is not "Integrated". Also the online help presumes you already know all sorts of stuff, so much implied knowledge makes it "anti-documented". If I ever get through the failed importer (where it treats all symbols as defined) maybe I'll find that more works than I think. 
So the internal terminal has additional path which does make "pio" available, but why not have that bit of essential information in help content? SO, back to wondering what the exact fucking spelling of the name of my board is out of the 1538 candidates.
) and this failed attempt at using platformio ends with "ESP32NOW.h file not found", the esp libraries are as out of date as the tools.

I presume vscode is responsible for the following rudenesses:
) launches Chromium for web links despite me having designated Firefox as my system handler for such.
) ignores my system settings for window title bar, where I have the _X[] things on the left instead of the right.


